<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/schema/mybatis-3-mapper.dtd">

<mapper namespace="com.arton.app.dao.PerfMapper">
    <!-- ** 실제 서비스라면 다수의 쿼리문 WHERE 절에 '공연날짜가 오늘보다 이후' 또는 '활성화된 공연'이라는 조건이 추가되어야 한다. -->

    <!--DealPage 공연 1개 읽기(공연정보 + 기타 집계정보)-->
    <!--
        * parameterType : int(perfId)
        * usage : DealService
    -->
    <select id="selectPerfByPerfId" parameterType="int" resultType="PerfDto">
        SELECT
            p.*
            , (SELECT min(show_date) from perf_round where perf_id = p.id) AS perf_start
            , (SELECT max(show_date) from perf_round where perf_id = p.id) AS perf_end
            , (SELECT COUNT(*) FROM wishlist WHERE perf_id = p.id) AS like_cnt
            , (SELECT ROUND(AVG(rating), 1) FROM review WHERE perf_id = p.id) AS avg_rating
            , group_concat(concat_ws(' ', seat_class, FORMAT(seat_price, 0), "원") separator '\n') AS seat_info
        FROM perf p
            JOIN seat s ON p.id = s.perf_id
            AND p.id = #{perfId}
    </select>

    <!--DealPage 예매하기 섹션 좌석 리스트 읽기-->
    <!--
        * parameterType : int(perfId)
        * usage : DealService
    -->
    <select id="selectSeatInvtsByPerfId" parameterType="int" resultType="ViewSeatInvtDto">
        SELECT *
        FROM view_seat_invt
        WHERE perf_id = #{perfId}
        ORDER BY seat_invt_id
    </select>




    <!--공연 List 읽기(map 으로 where, order, limit 조건 직접 작성) -->
    <!--
        * parameterType : map((where), (order), (limit))
        * usage : IndexService, CateService, SearchService
    -->
    <!--
        ***쿼리문 기본값*** (직접 작성하는 문구이므로 ${ } 사용)
            where 기본값 = 없음
            order 기본값 = 없음
            limit 기본값 = LIMIT 0, 15
    -->
    <select id="selectPerfsByCustomizedCondition" parameterType="map" resultType="PerfDto">
        SELECT
            p.*
            , (SELECT min(show_date) from perf_round where perf_id = p.id) AS perf_start
            , (SELECT max(show_date) from perf_round where perf_id = p.id) AS perf_end
            , (SELECT COUNT(*) FROM wishlist WHERE perf_id = p.id) AS like_cnt
            , (SELECT ROUND(AVG(rating), 0) FROM review WHERE perf_id = p.id) AS avg_rating
        FROM perf p
        WHERE true
            AND perf_status = 1
        <choose>
            <when test="where == null">
            </when>
            <otherwise>
                ${where}
            </otherwise>
        </choose>
        <choose>
            <when test="order == null">
            </when>
            <otherwise>
                ${order}
            </otherwise>
        </choose>
        <choose>
            <when test="limit == null">
            </when>
            <otherwise>
                ${limit}
            </otherwise>
        </choose>
    </select>



    <!--예매 랭킹 List 읽기-->
    <!--
        * parameterType : RankingCondition
        * usage : IndexService, CateService, RankService
    -->
    <select id="selectPerfsOrderByBookingCount" parameterType="RankingCondition" resultType="PerfDto">
        SELECT
            p.*
            , (SELECT min(show_date) from perf_round where perf_id = p.id) AS perf_start
            , (SELECT max(show_date) from perf_round where perf_id = p.id) AS perf_end
            , (SELECT COUNT(*) FROM wishlist WHERE perf_id = p.id) AS like_cnt
            , (SELECT ROUND(AVG(rating), 0) FROM review WHERE perf_id = p.id) AS avg_rating
            , IFNULL((SELECT SUM(ticket_cnt) FROM booking WHERE perf_id = p.id and booking_time between STR_TO_DATE(#{bookingDateFrom}, '%Y%m%d%H:%i:%s') and STR_TO_DATE(#{bookingDateTo}, '%Y%m%d%H:%i:%s') group by perf_id), 0) AS booking_cnt
            <!-- IFNULL() 사용 이유
                 => 쿼리문 SUM 함수에서 계산하는 모든 레코드가 null 일경우 결과값이 null 이 되기 때문에 IFNULL(SUM(~~~~), 0)을 사용해 null 일 경우 0으로 반환될 수 있도록 해주었다.-->
        FROM perf p
        WHERE true
        <choose>
            <when test="cateCode==1">
                AND cate = "콘서트"
            </when>
            <when test="cateCode==2">
                AND cate = "뮤지컬"
            </when>
            <when test="cateCode==3">
                AND cate = "연극"
            </when>
            <otherwise>
            </otherwise>
        </choose>
        ORDER BY booking_cnt DESC
        LIMIT 0, 15
    </select>

    <!--찜 랭킹 List 읽기-->
    <!--
        * parameterType : int(cateCode)
        * usage : IndexService, CateService
    -->
    <select id="selectPerfsOrderByLikeCount" parameterType="int" resultType="PerfDto">
        SELECT
            p.*
            , (SELECT min(show_date) from perf_round where perf_id = p.id) AS perf_start
            , (SELECT max(show_date) from perf_round where perf_id = p.id) AS perf_end
            , (SELECT COUNT(*) FROM wishlist WHERE perf_id = p.id) AS like_cnt
            , (SELECT ROUND(AVG(rating), 0) FROM review WHERE perf_id = p.id) AS avg_rating
        FROM perf p
        WHERE true
            AND perf_status = 1
        <choose>
            <when test="cateCode==1">
                AND cate = "콘서트"
            </when>
            <when test="cateCode==2">
                AND cate = "뮤지컬"
            </when>
            <when test="cateCode==3">
                AND cate = "연극"
            </when>
            <otherwise>
            </otherwise>
        </choose>
        ORDER BY like_cnt DESC
    </select>

    <!-- 마이페이지 찜 목록-->
    <!--
        * parameterType : int(userIdx)
        * usage : MyPageService
    -->
    <select id="selectWishlistsByUserIdx" parameterType="int" resultType="PerfDto">
        SELECT p.*
        FROM perf p
        JOIN wishlist w ON w.perf_id = p.id
            AND w.user_idx = #{userIdx}
        ORDER BY w.id DESC
        LIMIT 0, 50
    </select>

</mapper>